{
    "compilerOptions": {
        /* Visit https://aka.ms/tsconfig.json to read more about this file */

        /* 基本选项 */
        // "incremental": true,                         /* 启用增量编译 */
        "target": "es5",
        /* 指定ECMAScript目标版本：``ES3''（默认），``ES5''，``ES2015''，``ES2016''，``ES2017''，``ES2018''，``ES2019''，``ES2020''或``ESNEXT''。 */
        "module": "commonjs",
        /* 指定模块代码生成：“ none”，“ commonjs”，“ amd”，“ system”，“ umd”，“ es2015”，“ es2020”或“ ESNext”。 */
        // "lib": [],                                   /* 指定要包含在编译中的库文件。 */
        // "allowJs": true,                             /* 允许编译javascript文件。 */
        // "checkJs": true,                             /* 报告.js文件中的错误。  */
        // "jsx": "preserve",                           /* 指定JSX代码生成：“ preserve”，“ react-native”，“ react”，“ react-jsx”或“ react-jsxdev”。 */
        // "declaration": true,                         /* 生成相应的“ .d.ts”文件。 */
        // "declarationMap": true,                      /* 为每个相应的“ .d.ts”文件生成一个源映射。 */
        // "sourceMap": true,                           /* 生成相应的“ .map”文件。  */
        // "outFile": "./",                             /* 连接并输出到单个文件。 */
        "outDir": "./src",
        /* 将输出结构重定向到目录。 */
        // "rootDir": "./",                             /* 指定输入文件的根目录。用于通过--outDir控制输出目录结构。 */
        // "composite": true,                           /* 启用项目编译 */
        // "tsBuildInfoFile": "./",                     /* 指定文件以存储增量编译信息 */
        // "removeComments": true,                      /* 不要发出注释以输出。 */
        // "noEmit": true,                              /* 不要发射输出。 */
        // "importHelpers": true,                       /* 从'tslib'导入导入发射助手。 */
        // "downlevelIteration": true,                  /* 当针对“ ES5”或“ ES3”时，在“ for-of”，传播和解构中为可迭代项提供全面支持。 */
        // "isolatedModules": true,                     /* 将每个文件作为单独的模块进行翻译（类似于“ ts.transpileModule”）。 */

        /* 严格的类型检查选项 */
        "strict": true,
        /* 启用所有严格的类型检查选项。 */
        // "noImplicitAny": true,                       /* 在隐式“ any”类型的表达式和声明上引发错误。 */
        // "strictNullChecks": true,                    /* 启用严格的空检查 */
        // "strictFunctionTypes": true,                 /* 启用对功能类型的严格检查。 */
        // "strictBindCallApply": true,                 /* 在函数上启用严格的“绑定”，“调用”和“应用”方法。 */
        // "strictPropertyInitialization": true,        /* 在类中启用对属性初始化的严格检查。 */
        // "noImplicitThis": true,                      /* 使用隐含的“ any”类型引发“ this”表达式的错误。 */
        // "alwaysStrict": true,                        /* 以严格模式解析并为每个源文件发出“ use strict”。 */

        /* Additional Checks */
        // "noUnusedLocals": true,                      /* 报告未使用的本地错误。 */
        // "noUnusedParameters": true,                  /* 报告未使用参数的错误。 */
        // "noImplicitReturns": true,                   /* 当函数中的所有代码路径均未返回值时，报告错误。 */
        // "noFallthroughCasesInSwitch": true,          /* 在switch语句中报告失败情况的错误。 */
        // "noUncheckedIndexedAccess": true,            /* 在索引签名结果中包括“未定义” */
        // "noPropertyAccessFromIndexSignature": true,  /* 需要索引签名中未声明的属性才能使用元素访问。 */

        /* Module Resolution Options */
        // "moduleResolution": "node",                  /* 指定模块解析策略：“节点”（Node.js）或“经典”（TypeScript 1.6之前的版本）。 */
        // "baseUrl": "./",                             /* 基本目录，用于解析非绝对模块名称。 */
        // "paths": {},                                 /* 一系列条目将导入重新映射到相对于“ baseUrl”的查找位置。 */
        // "rootDirs": [],                              /* 根文件夹列表，其组合内容表示运行时项目的结构。 */
        // "typeRoots": [],                             /* 包含类型定义的文件夹列表。 */
        // "types": [],                                 /* 类型声明文件要包含在编译中。 */
        // "allowSyntheticDefaultImports": true,        /* 允许从模块进行默认导入而没有默认导出。这不影响代码发出，仅影响类型检查。 */
        "esModuleInterop": true,
        /* 通过为所有导入创建名称空间对象，启用CommonJS和ES模块之间的发射互操作性。暗示“ allowSyntheticDefaultImports”。  */
        // "preserveSymlinks": true,                    /* 不要解析符号链接的真实路径。 */
        // "allowUmdGlobalAccess": true,                /* 允许从模块访问UMD全局变量。 */

        /* Source Map Options */
        // "sourceRoot": "",                            /* 指定调试器应在其中定位TypeScript文件的位置，而不是源位置。 */
        // "mapRoot": "",                               /* 指定调试器应在其中定位地图文件的位置，而不是生成的位置。 */
        // "inlineSourceMap": true,                     /* 发出带有源映射的单个文件，而不是拥有单独的文件。 */
        // "inlineSources": true,                       /* 在单个文件中将源代码与源映射一起发射出去；需要设置“ --inlineSourceMap”或“ --sourceMap”。 */

        /* Experimental Options */
        // "experimentalDecorators": true,              /* 为ES7装饰器启用实验性支持。 */
        // "emitDecoratorMetadata": true,               /* 为发布装饰器的类型元数据启用实验性支持。 */

        /* Advanced Options */
        "skipLibCheck": true,
        /* 跳过声明文件的类型检查。 */
        "forceConsistentCasingInFileNames": true /* 禁止对同一文件使用大小写不一致的引用。 */
    },
    "include": [
        "src/**/*"
    ],
    "exclude": [
        "node_modules",
        "**/*.spec.ts"
    ]
}